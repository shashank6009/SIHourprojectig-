{"version":3,"sources":["turbopack:///[project]/src/lib/users.ts"],"sourcesContent":["// Shared in-memory storage for users\n// In production, this would be replaced with a database\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  password?: string; // Optional for Google OAuth users\n  provider: 'credentials' | 'google';\n  googleId?: string;\n  profileImage?: string;\n  createdAt: Date;\n  lastLogin?: Date;\n  profileData?: {\n    firstName?: string;\n    lastName?: string;\n    phone?: string;\n    dateOfBirth?: string;\n    gender?: string;\n    nationality?: string;\n    address?: string;\n    city?: string;\n    state?: string;\n    pincode?: string;\n    highestQualification?: string;\n    university?: string;\n    course?: string;\n    graduationYear?: string;\n    cgpa?: string;\n    currentStatus?: string;\n    workExperience?: string;\n    skills?: string;\n    languages?: string;\n    aadhaarNumber?: string;\n    bankAccountNumber?: string;\n    ifscCode?: string;\n    panNumber?: string;\n    category?: string;\n    preferredInternshipDuration?: string;\n    preferredLocation?: string;\n    careerObjective?: string;\n  };\n}\n\nexport const users: User[] = [];\n\n// Helper functions\nexport function findUserByEmail(email: string): User | undefined {\n  return users.find(user => user.email === email);\n}\n\nexport function findUserByGoogleId(googleId: string): User | undefined {\n  return users.find(user => user.googleId === googleId);\n}\n\nexport function createUser(userData: Omit<User, 'id' | 'createdAt'>): User {\n  const newUser: User = {\n    id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    ...userData,\n    createdAt: new Date(),\n    lastLogin: new Date(),\n  };\n  users.push(newUser);\n  return newUser;\n}\n\nexport function createOrUpdateGoogleUser(googleProfile: {\n  id: string;\n  email: string;\n  name: string;\n  picture?: string;\n  given_name?: string;\n  family_name?: string;\n}): User {\n  // Check if user already exists by Google ID\n  let user = findUserByGoogleId(googleProfile.id);\n  \n  if (user) {\n    // Update existing user\n    user.name = googleProfile.name;\n    user.profileImage = googleProfile.picture;\n    user.lastLogin = new Date();\n    return user;\n  }\n  \n  // Check if user exists by email\n  user = findUserByEmail(googleProfile.email);\n  \n  if (user) {\n    // Link Google account to existing user\n    user.googleId = googleProfile.id;\n    user.provider = 'google';\n    user.profileImage = googleProfile.picture;\n    user.lastLogin = new Date();\n    return user;\n  }\n  \n  // Create new user\n  return createUser({\n    name: googleProfile.name,\n    email: googleProfile.email,\n    provider: 'google',\n    googleId: googleProfile.id,\n    profileImage: googleProfile.picture,\n  });\n}\n\nexport function updateUserProfile(userId: string, profileData: Partial<User['profileData']>): User | null {\n  const user = users.find(u => u.id === userId);\n  if (user) {\n    user.profileData = { ...user.profileData, ...profileData };\n    return user;\n  }\n  return null;\n}\n"],"names":[],"mappings":"i4DA4CO,IAAM,EAAgB,EAAE,CAGxB,SAAS,EAAgB,CAAa,EAC3C,OAAO,EAAM,IAAI,CAAC,GAAQ,EAAK,KAAK,GAAK,EAC3C,CAMO,SAAS,EAAW,CAAwC,EACjE,IAAM,EAAgB,CACpB,GAAI,CAAC,KAAK,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,EAAG,GAAA,CAAI,CACnE,GAAG,CAAQ,CACX,UAAW,IAAI,KACf,UAAW,IAAI,IACjB,EAEA,OADA,EAAM,IAAI,CAAC,GACJ,CACT,CAEO,SAAS,EAAyB,CAOxC,QAEC,IAAI,GAxB6B,EAwBH,EAAnB,AAAiC,EAAE,CAvBvC,CAD0C,CACpC,IAAI,CAAC,GAAQ,EAAK,QAAQ,GAAK,WAyB5C,AAAI,GAEF,EAAK,CAFG,GAEC,CAAG,EAAc,IAAI,CAC9B,EAAK,YAAY,CAAG,EAAc,OAAO,CACzC,EAAK,SAAS,CAAG,IAAI,KACd,IAIT,EAAO,EAAgB,EAAc,MAAK,GAIxC,EAAK,QAAQ,CAAG,EAAc,EAAE,CAChC,EAAK,QAAQ,CAAG,SAChB,EAAK,YAAY,CAAG,EAAc,OAAO,CACzC,EAAK,SAAS,CAAG,IAAI,KACd,GAIF,EAAW,CAChB,KAAM,EAAc,IAAI,CACxB,MAAO,EAAc,KAAK,CAC1B,SAAU,SACV,SAAU,EAAc,EAAE,CAC1B,aAAc,EAAc,OAAO,AACrC,EACF"}