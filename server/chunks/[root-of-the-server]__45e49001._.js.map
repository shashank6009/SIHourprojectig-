{"version":3,"sources":["turbopack:///[project]/src/lib/analytics.ts","turbopack:///[project]/src/lib/privacy.ts","turbopack:///[project]/src/app/api/feedback/comment/route.ts","turbopack:///[project]/node_modules/next/dist/esm/build/templates/app-route.js"],"sourcesContent":["import { supabaseServer } from './supabase-server';\nimport { hashUserId, sanitizeMetadata } from './privacy';\n\nexport type EventType = \n  | \"INTERVIEW_COMPLETED\" \n  | \"JD_ALIGNED\" \n  | \"PDF_EXPORTED\" \n  | \"COMMENT_ADDED\" \n  | \"COMMENT_RESOLVED\" \n  | \"MENTOR_APPROVED\"\n  | \"BATCH_CREATED\"\n  | \"BATCH_ITEM_COMPLETED\"\n  | \"BATCH_EXPORTED\"\n  | \"EMAIL_DRAFT_CREATED\"\n  | \"FOLLOWUP_SCHEDULED\"\n  | \"ATS_CHECKLIST_VIEWED\"\n  | \"REFERRAL_INTRO_DRAFTED\"\n  | \"REFERRAL_IMPORTED\"\n  | \"CONSENT_GRANTED\"\n  | \"CONSENT_REVOKED\"\n  | \"DSR_EXPORT_REQUESTED\"\n  | \"DSR_DELETE_REQUESTED\"\n  | \"PRIVACY_REGION_SET\";\n\nexport interface EventMetadata {\n  [key: string]: any;\n}\n\n/**\n * Track user events for analytics and continuous improvement\n * All PII is hashed and metadata is sanitized for privacy\n */\nexport async function trackEvent(args: {\n  userId: string;\n  event: EventType;\n  resumeVersionId?: string;\n  metadata?: EventMetadata;\n}): Promise<void> {\n  try {\n    const { userId, event, resumeVersionId, metadata = {} } = args;\n    \n    // Hash user ID for privacy\n    const userHash = hashUserId(userId);\n    \n    // Sanitize metadata to remove PII and limit size\n    const sanitizedMetadata = sanitizeMetadata(metadata);\n    \n    // Insert event into database\n    const { error } = await supabaseServer\n      .from('resume_events')\n      .insert({\n        user_hash: userHash,\n        resume_version_id: resumeVersionId || null,\n        event_type: event,\n        metadata: sanitizedMetadata,\n      });\n    \n    if (error) {\n      console.error('Failed to track event:', error);\n      // Don't throw - analytics failures shouldn't break user flows\n    }\n  } catch (error) {\n    console.error('Analytics tracking error:', error);\n    // Silently fail to avoid breaking user experience\n  }\n}\n\n/**\n * Get user events for a specific time range\n * Used for analytics and debugging\n */\nexport async function getUserEvents(\n  userId: string,\n  startDate?: string,\n  endDate?: string,\n  eventType?: EventType\n): Promise<any[]> {\n  try {\n    const userHash = hashUserId(userId);\n    \n    let query = supabaseServer\n      .from('resume_events')\n      .select('*')\n      .eq('user_hash', userHash)\n      .order('created_at', { ascending: false });\n    \n    if (startDate) {\n      query = query.gte('created_at', startDate);\n    }\n    \n    if (endDate) {\n      query = query.lte('created_at', endDate);\n    }\n    \n    if (eventType) {\n      query = query.eq('event_type', eventType);\n    }\n    \n    const { data, error } = await query.limit(100);\n    \n    if (error) {\n      console.error('Failed to fetch user events:', error);\n      return [];\n    }\n    \n    return data || [];\n  } catch (error) {\n    console.error('Error fetching user events:', error);\n    return [];\n  }\n}\n\n/**\n * Get aggregated metrics for a date range\n */\nexport async function getMetrics(\n  startDate: string,\n  endDate: string,\n  userHash?: string\n): Promise<any[]> {\n  try {\n    let query = supabaseServer\n      .from('resume_metrics_daily')\n      .select('*')\n      .gte('day', startDate)\n      .lte('day', endDate)\n      .order('day', { ascending: false });\n    \n    if (userHash) {\n      query = query.eq('user_hash', userHash);\n    }\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      console.error('Failed to fetch metrics:', error);\n      return [];\n    }\n    \n    return data || [];\n  } catch (error) {\n    console.error('Error fetching metrics:', error);\n    return [];\n  }\n}\n\n/**\n * Track model run for audit and improvement\n */\nexport async function trackModelRun(args: {\n  userId: string;\n  resumeVersionId?: string;\n  provider: string;\n  model: string;\n  promptKey: string;\n  tokensIn?: number;\n  tokensOut?: number;\n  atsScore?: number;\n  missingKeywords?: number;\n}): Promise<void> {\n  try {\n    const { userId, resumeVersionId, provider, model, promptKey, tokensIn, tokensOut, atsScore, missingKeywords } = args;\n    \n    const userHash = hashUserId(userId);\n    \n    const { error } = await supabaseServer\n      .from('resume_model_runs')\n      .insert({\n        user_hash: userHash,\n        resume_version_id: resumeVersionId || null,\n        provider,\n        model,\n        prompt_key: promptKey,\n        tokens_in: tokensIn || 0,\n        tokens_out: tokensOut || 0,\n        ats_score: atsScore || null,\n        missing_keywords: missingKeywords || 0,\n      });\n    \n    if (error) {\n      console.error('Failed to track model run:', error);\n    }\n  } catch (error) {\n    console.error('Model run tracking error:', error);\n  }\n}\n","import { createHash } from 'crypto';\n\n/**\n * Hash user ID for privacy-safe analytics\n * Uses SHA-256 to create a consistent hash that can't be reversed\n */\nexport function hashUserId(raw: string): string {\n  if (!raw) return '';\n  \n  // Use Node.js crypto for server-side hashing\n  return createHash('sha256').update(raw).digest('hex');\n}\n\n/**\n * Redact PII from text for safe logging\n * Removes emails, phone numbers, and other sensitive data\n */\nexport function redactPII(text: string): string {\n  if (!text) return '';\n  \n  let redacted = text;\n  \n  // Remove email addresses\n  redacted = redacted.replace(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g, '[email]');\n  \n  // Remove phone numbers (various formats)\n  redacted = redacted.replace(/\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b/g, '[phone]');\n  redacted = redacted.replace(/\\b\\(\\d{3}\\)\\s*\\d{3}[-.]?\\d{4}\\b/g, '[phone]');\n  redacted = redacted.replace(/\\b\\d{3}\\s\\d{3}\\s\\d{4}\\b/g, '[phone]');\n  \n  // Remove SSN patterns (basic)\n  redacted = redacted.replace(/\\b\\d{3}-\\d{2}-\\d{4}\\b/g, '[ssn]');\n  redacted = redacted.replace(/\\b\\d{9}\\b/g, '[ssn]');\n  \n  // Remove credit card patterns (basic)\n  redacted = redacted.replace(/\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b/g, '[card]');\n  \n  return redacted;\n}\n\n/**\n * Sanitize metadata for safe storage\n * Ensures metadata is JSON-safe and within size limits\n */\nexport function sanitizeMetadata(metadata: Record<string, any>): Record<string, any> {\n  if (!metadata || typeof metadata !== 'object') return {};\n  \n  const sanitized: Record<string, any> = {};\n  \n  for (const [key, value] of Object.entries(metadata)) {\n    // Skip if key is too long or contains sensitive patterns\n    if (key.length > 50 || /password|secret|token|key/i.test(key)) {\n      continue;\n    }\n    \n    // Handle different value types\n    if (typeof value === 'string') {\n      // Redact PII from strings and limit length\n      sanitized[key] = redactPII(value).substring(0, 500);\n    } else if (typeof value === 'number' || typeof value === 'boolean') {\n      sanitized[key] = value;\n    } else if (Array.isArray(value)) {\n      // Limit array size and sanitize each element\n      sanitized[key] = value.slice(0, 10).map(item => \n        typeof item === 'string' ? redactPII(item).substring(0, 100) : item\n      );\n    } else if (typeof value === 'object' && value !== null) {\n      // Recursively sanitize nested objects (limited depth)\n      sanitized[key] = sanitizeMetadata(value);\n    }\n  }\n  \n  // Ensure total size is under 2KB\n  const jsonString = JSON.stringify(sanitized);\n  if (jsonString.length > 2000) {\n    // Truncate by removing largest values\n    const entries = Object.entries(sanitized).sort((a, b) => \n      JSON.stringify(b[1]).length - JSON.stringify(a[1]).length\n    );\n    \n    const truncated: Record<string, any> = {};\n    let currentSize = 0;\n    \n    for (const [key, value] of entries) {\n      const entrySize = JSON.stringify({ [key]: value }).length;\n      if (currentSize + entrySize < 1800) { // Leave some buffer\n        truncated[key] = value;\n        currentSize += entrySize;\n      }\n    }\n    \n    return truncated;\n  }\n  \n  return sanitized;\n}\n","import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { supabaseServer } from '@/lib/supabase-server';\nimport { ResumeCommentSchema } from '@/types/resume';\nimport { trackEvent } from '@/lib/analytics';\n\n// Mock user ID for now\nconst mockUserId = '00000000-0000-0000-0000-000000000000'; // TODO: Wire real auth later\n\nconst CreateCommentSchema = z.object({\n  resumeVersionId: z.string().uuid(),\n  blockId: z.string().optional(),\n  lineRef: z.number().optional(),\n  author: z.string().min(1).max(100),\n  text: z.string().min(1).max(1000),\n});\n\nconst UpdateCommentSchema = z.object({\n  id: z.string().uuid(),\n  resolved: z.boolean(),\n});\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    const { resumeVersionId, blockId, lineRef, author, text } = CreateCommentSchema.parse(body);\n\n    // Sanitize inputs\n    const sanitizedAuthor = author.trim().substring(0, 100);\n    const sanitizedText = text.trim().substring(0, 1000);\n\n    // Check if version exists\n    const { data: version, error: versionError } = await supabaseServer\n      .from('resume_versions')\n      .select('id')\n      .eq('id', resumeVersionId)\n      .single();\n\n    if (versionError || !version) {\n      return NextResponse.json(\n        { error: 'Resume version not found' },\n        { status: 404 }\n      );\n    }\n\n    // Check comment limit (100 per version)\n    const { count } = await supabaseServer\n      .from('resume_comments')\n      .select('*', { count: 'exact', head: true })\n      .eq('resume_version_id', resumeVersionId);\n\n    if (count && count >= 100) {\n      return NextResponse.json(\n        { error: 'Comment limit reached (100 comments per version)' },\n        { status: 400 }\n      );\n    }\n\n    // Insert comment\n    const { data: comment, error: commentError } = await supabaseServer\n      .from('resume_comments')\n      .insert({\n        resume_version_id: resumeVersionId,\n        block_id: blockId,\n        line_ref: lineRef,\n        author: sanitizedAuthor,\n        text: sanitizedText,\n        resolved: false,\n      })\n      .select()\n      .single();\n\n    if (commentError) {\n      throw commentError;\n    }\n\n    // Track comment added event\n    await trackEvent({\n      userId: mockUserId,\n      event: 'COMMENT_ADDED',\n      resumeVersionId,\n      metadata: {\n        blockId,\n        lineRef,\n        author: sanitizedAuthor,\n        textLength: sanitizedText.length,\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: comment,\n    });\n\n  } catch (error) {\n    console.error('Create comment error:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid request data', details: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to create comment' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(req: NextRequest) {\n  try {\n    const url = new URL(req.url);\n    const resumeVersionId = url.searchParams.get('resumeVersionId');\n\n    if (!resumeVersionId) {\n      return NextResponse.json(\n        { error: 'resumeVersionId is required' },\n        { status: 400 }\n      );\n    }\n\n    // Fetch comments for the version\n    const { data: comments, error } = await supabaseServer\n      .from('resume_comments')\n      .select('*')\n      .eq('resume_version_id', resumeVersionId)\n      .order('created_at', { ascending: true });\n\n    if (error) {\n      throw error;\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: { comments: comments || [] },\n    });\n\n  } catch (error) {\n    console.error('Fetch comments error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch comments' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PATCH(req: NextRequest) {\n  try {\n    const body = await req.json();\n    const { id, resolved } = UpdateCommentSchema.parse(body);\n\n    // Update comment\n    const { data: comment, error } = await supabaseServer\n      .from('resume_comments')\n      .update({ resolved })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    // Track comment resolved event\n    await trackEvent({\n      userId: mockUserId,\n      event: 'COMMENT_RESOLVED',\n      resumeVersionId: comment.resume_version_id,\n      metadata: {\n        commentId: id,\n        resolved,\n        author: comment.author,\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: comment,\n    });\n\n  } catch (error) {\n    console.error('Update comment error:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid request data', details: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to update comment' },\n      { status: 500 }\n    );\n  }\n}\n","import { AppRouteRouteModule } from \"next/dist/esm/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/esm/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/esm/server/lib/patch-fetch\";\nimport { getRequestMeta } from \"next/dist/esm/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/esm/server/lib/trace/tracer\";\nimport { normalizeAppPath } from \"next/dist/esm/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/esm/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/esm/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/esm/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/esm/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/esm/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/esm/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/esm/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/esm/lib/constants\";\nimport { NoFallbackError } from \"next/dist/esm/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/esm/server/response-cache\";\nimport * as userland from \"INNER_APP_ROUTE\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/feedback/comment/route\",\n        pathname: \"/api/feedback/comment\",\n        filename: \"route\",\n        bundlePath: \"\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"[project]/src/app/api/feedback/comment/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/feedback/comment/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!getRequestMeta(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!getRequestMeta(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(getRequestMeta(req, 'minimalMode') && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n"],"names":[],"mappings":"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","ignoreList":[3]}