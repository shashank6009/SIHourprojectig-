{"version":3,"sources":["turbopack:///[project]/src/lib/analytics.ts","turbopack:///[project]/src/lib/privacy.ts","turbopack:///[project]/src/lib/jd/normalize.ts"],"sourcesContent":["import { supabaseServer } from './supabase-server';\nimport { hashUserId, sanitizeMetadata } from './privacy';\n\nexport type EventType = \n  | \"INTERVIEW_COMPLETED\" \n  | \"JD_ALIGNED\" \n  | \"PDF_EXPORTED\" \n  | \"COMMENT_ADDED\" \n  | \"COMMENT_RESOLVED\" \n  | \"MENTOR_APPROVED\"\n  | \"BATCH_CREATED\"\n  | \"BATCH_ITEM_COMPLETED\"\n  | \"BATCH_EXPORTED\"\n  | \"EMAIL_DRAFT_CREATED\"\n  | \"FOLLOWUP_SCHEDULED\"\n  | \"ATS_CHECKLIST_VIEWED\"\n  | \"REFERRAL_INTRO_DRAFTED\"\n  | \"REFERRAL_IMPORTED\"\n  | \"CONSENT_GRANTED\"\n  | \"CONSENT_REVOKED\"\n  | \"DSR_EXPORT_REQUESTED\"\n  | \"DSR_DELETE_REQUESTED\"\n  | \"PRIVACY_REGION_SET\";\n\nexport interface EventMetadata {\n  [key: string]: any;\n}\n\n/**\n * Track user events for analytics and continuous improvement\n * All PII is hashed and metadata is sanitized for privacy\n */\nexport async function trackEvent(args: {\n  userId: string;\n  event: EventType;\n  resumeVersionId?: string;\n  metadata?: EventMetadata;\n}): Promise<void> {\n  try {\n    const { userId, event, resumeVersionId, metadata = {} } = args;\n    \n    // Hash user ID for privacy\n    const userHash = hashUserId(userId);\n    \n    // Sanitize metadata to remove PII and limit size\n    const sanitizedMetadata = sanitizeMetadata(metadata);\n    \n    // Insert event into database\n    const { error } = await supabaseServer\n      .from('resume_events')\n      .insert({\n        user_hash: userHash,\n        resume_version_id: resumeVersionId || null,\n        event_type: event,\n        metadata: sanitizedMetadata,\n      });\n    \n    if (error) {\n      console.error('Failed to track event:', error);\n      // Don't throw - analytics failures shouldn't break user flows\n    }\n  } catch (error) {\n    console.error('Analytics tracking error:', error);\n    // Silently fail to avoid breaking user experience\n  }\n}\n\n/**\n * Get user events for a specific time range\n * Used for analytics and debugging\n */\nexport async function getUserEvents(\n  userId: string,\n  startDate?: string,\n  endDate?: string,\n  eventType?: EventType\n): Promise<any[]> {\n  try {\n    const userHash = hashUserId(userId);\n    \n    let query = supabaseServer\n      .from('resume_events')\n      .select('*')\n      .eq('user_hash', userHash)\n      .order('created_at', { ascending: false });\n    \n    if (startDate) {\n      query = query.gte('created_at', startDate);\n    }\n    \n    if (endDate) {\n      query = query.lte('created_at', endDate);\n    }\n    \n    if (eventType) {\n      query = query.eq('event_type', eventType);\n    }\n    \n    const { data, error } = await query.limit(100);\n    \n    if (error) {\n      console.error('Failed to fetch user events:', error);\n      return [];\n    }\n    \n    return data || [];\n  } catch (error) {\n    console.error('Error fetching user events:', error);\n    return [];\n  }\n}\n\n/**\n * Get aggregated metrics for a date range\n */\nexport async function getMetrics(\n  startDate: string,\n  endDate: string,\n  userHash?: string\n): Promise<any[]> {\n  try {\n    let query = supabaseServer\n      .from('resume_metrics_daily')\n      .select('*')\n      .gte('day', startDate)\n      .lte('day', endDate)\n      .order('day', { ascending: false });\n    \n    if (userHash) {\n      query = query.eq('user_hash', userHash);\n    }\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      console.error('Failed to fetch metrics:', error);\n      return [];\n    }\n    \n    return data || [];\n  } catch (error) {\n    console.error('Error fetching metrics:', error);\n    return [];\n  }\n}\n\n/**\n * Track model run for audit and improvement\n */\nexport async function trackModelRun(args: {\n  userId: string;\n  resumeVersionId?: string;\n  provider: string;\n  model: string;\n  promptKey: string;\n  tokensIn?: number;\n  tokensOut?: number;\n  atsScore?: number;\n  missingKeywords?: number;\n}): Promise<void> {\n  try {\n    const { userId, resumeVersionId, provider, model, promptKey, tokensIn, tokensOut, atsScore, missingKeywords } = args;\n    \n    const userHash = hashUserId(userId);\n    \n    const { error } = await supabaseServer\n      .from('resume_model_runs')\n      .insert({\n        user_hash: userHash,\n        resume_version_id: resumeVersionId || null,\n        provider,\n        model,\n        prompt_key: promptKey,\n        tokens_in: tokensIn || 0,\n        tokens_out: tokensOut || 0,\n        ats_score: atsScore || null,\n        missing_keywords: missingKeywords || 0,\n      });\n    \n    if (error) {\n      console.error('Failed to track model run:', error);\n    }\n  } catch (error) {\n    console.error('Model run tracking error:', error);\n  }\n}\n","import { createHash } from 'crypto';\n\n/**\n * Hash user ID for privacy-safe analytics\n * Uses SHA-256 to create a consistent hash that can't be reversed\n */\nexport function hashUserId(raw: string): string {\n  if (!raw) return '';\n  \n  // Use Node.js crypto for server-side hashing\n  return createHash('sha256').update(raw).digest('hex');\n}\n\n/**\n * Redact PII from text for safe logging\n * Removes emails, phone numbers, and other sensitive data\n */\nexport function redactPII(text: string): string {\n  if (!text) return '';\n  \n  let redacted = text;\n  \n  // Remove email addresses\n  redacted = redacted.replace(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g, '[email]');\n  \n  // Remove phone numbers (various formats)\n  redacted = redacted.replace(/\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b/g, '[phone]');\n  redacted = redacted.replace(/\\b\\(\\d{3}\\)\\s*\\d{3}[-.]?\\d{4}\\b/g, '[phone]');\n  redacted = redacted.replace(/\\b\\d{3}\\s\\d{3}\\s\\d{4}\\b/g, '[phone]');\n  \n  // Remove SSN patterns (basic)\n  redacted = redacted.replace(/\\b\\d{3}-\\d{2}-\\d{4}\\b/g, '[ssn]');\n  redacted = redacted.replace(/\\b\\d{9}\\b/g, '[ssn]');\n  \n  // Remove credit card patterns (basic)\n  redacted = redacted.replace(/\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b/g, '[card]');\n  \n  return redacted;\n}\n\n/**\n * Sanitize metadata for safe storage\n * Ensures metadata is JSON-safe and within size limits\n */\nexport function sanitizeMetadata(metadata: Record<string, any>): Record<string, any> {\n  if (!metadata || typeof metadata !== 'object') return {};\n  \n  const sanitized: Record<string, any> = {};\n  \n  for (const [key, value] of Object.entries(metadata)) {\n    // Skip if key is too long or contains sensitive patterns\n    if (key.length > 50 || /password|secret|token|key/i.test(key)) {\n      continue;\n    }\n    \n    // Handle different value types\n    if (typeof value === 'string') {\n      // Redact PII from strings and limit length\n      sanitized[key] = redactPII(value).substring(0, 500);\n    } else if (typeof value === 'number' || typeof value === 'boolean') {\n      sanitized[key] = value;\n    } else if (Array.isArray(value)) {\n      // Limit array size and sanitize each element\n      sanitized[key] = value.slice(0, 10).map(item => \n        typeof item === 'string' ? redactPII(item).substring(0, 100) : item\n      );\n    } else if (typeof value === 'object' && value !== null) {\n      // Recursively sanitize nested objects (limited depth)\n      sanitized[key] = sanitizeMetadata(value);\n    }\n  }\n  \n  // Ensure total size is under 2KB\n  const jsonString = JSON.stringify(sanitized);\n  if (jsonString.length > 2000) {\n    // Truncate by removing largest values\n    const entries = Object.entries(sanitized).sort((a, b) => \n      JSON.stringify(b[1]).length - JSON.stringify(a[1]).length\n    );\n    \n    const truncated: Record<string, any> = {};\n    let currentSize = 0;\n    \n    for (const [key, value] of entries) {\n      const entrySize = JSON.stringify({ [key]: value }).length;\n      if (currentSize + entrySize < 1800) { // Leave some buffer\n        truncated[key] = value;\n        currentSize += entrySize;\n      }\n    }\n    \n    return truncated;\n  }\n  \n  return sanitized;\n}\n","/**\n * JD Normalization Module\n * Handles URL fetching, text extraction, and keyword extraction for job descriptions\n */\n\nexport interface NormalizedJD {\n  company?: string;\n  role?: string;\n  jdText: string;\n  keywords: string[];\n}\n\n/**\n * Extract text from HTML content\n */\nfunction extractTextFromHTML(html: string): string {\n  return html\n    .replace(/<script[^>]*>.*?<\\/script>/gi, '')\n    .replace(/<style[^>]*>.*?<\\/style>/gi, '')\n    .replace(/<[^>]*>/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n/**\n * Extract company name from HTML or text using heuristics\n */\nfunction extractCompany(html: string, text: string): string | undefined {\n  // Try to extract from title tag\n  const titleMatch = html.match(/<title[^>]*>([^<]+)<\\/title>/i);\n  if (titleMatch) {\n    const title = titleMatch[1].toLowerCase();\n    // Common patterns: \"Software Engineer at Company Name\", \"Company Name - Job Title\"\n    const atMatch = title.match(/(?:at|@)\\s*([^|\\-\\n]+)/);\n    if (atMatch) {\n      return atMatch[1].trim().replace(/[^\\w\\s]/g, '').trim();\n    }\n    \n    const dashMatch = title.match(/^([^|\\-\\n]+)\\s*[-|]/);\n    if (dashMatch) {\n      return dashMatch[1].trim().replace(/[^\\w\\s]/g, '').trim();\n    }\n  }\n\n  // Try to extract from h1 tag\n  const h1Match = html.match(/<h1[^>]*>([^<]+)<\\/h1>/i);\n  if (h1Match) {\n    const h1 = h1Match[1].toLowerCase();\n    const atMatch = h1.match(/(?:at|@)\\s*([^|\\-\\n]+)/);\n    if (atMatch) {\n      return atMatch[1].trim().replace(/[^\\w\\s]/g, '').trim();\n    }\n  }\n\n  // Try to extract from meta description\n  const metaMatch = html.match(/<meta[^>]*name=[\"']description[\"'][^>]*content=[\"']([^\"']+)[\"']/i);\n  if (metaMatch) {\n    const meta = metaMatch[1].toLowerCase();\n    const atMatch = meta.match(/(?:at|@)\\s*([^|\\-\\n]+)/);\n    if (atMatch) {\n      return atMatch[1].trim().replace(/[^\\w\\s]/g, '').trim();\n    }\n  }\n\n  // Fallback: look for common company patterns in text\n  const companyPatterns = [\n    /(?:at|@)\\s*([A-Z][a-zA-Z\\s&]+(?:Inc|Corp|LLC|Ltd|Company|Technologies|Systems|Solutions|Group|Partners)?)/i,\n    /([A-Z][a-zA-Z\\s&]+(?:Inc|Corp|LLC|Ltd|Company|Technologies|Systems|Solutions|Group|Partners)?)\\s*(?:is|seeks|looking)/i,\n  ];\n\n  for (const pattern of companyPatterns) {\n    const match = text.match(pattern);\n    if (match && match[1].length > 2 && match[1].length < 50) {\n      return match[1].trim();\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Extract role/job title from HTML or text using heuristics\n */\nfunction extractRole(html: string, text: string): string | undefined {\n  // Try to extract from title tag\n  const titleMatch = html.match(/<title[^>]*>([^<]+)<\\/title>/i);\n  if (titleMatch) {\n    const title = titleMatch[1];\n    // Common patterns: \"Software Engineer at Company\", \"Company - Software Engineer\"\n    const roleMatch = title.match(/^([^|@\\-]+?)(?:\\s*(?:at|@|\\-))/);\n    if (roleMatch) {\n      return roleMatch[1].trim();\n    }\n    \n    const dashMatch = title.match(/[^\\-\\|]+[\\-\\|]\\s*([^\\-\\|]+)/);\n    if (dashMatch) {\n      return dashMatch[1].trim();\n    }\n  }\n\n  // Try to extract from h1 tag\n  const h1Match = html.match(/<h1[^>]*>([^<]+)<\\/h1>/i);\n  if (h1Match) {\n    const h1 = h1Match[1];\n    const roleMatch = h1.match(/^([^|@\\-]+?)(?:\\s*(?:at|@|\\-))/);\n    if (roleMatch) {\n      return roleMatch[1].trim();\n    }\n  }\n\n  // Fallback: look for common job title patterns in text\n  const jobTitlePatterns = [\n    /(?:position|role|title)[:\\s]+([A-Z][a-zA-Z\\s]+(?:Engineer|Developer|Manager|Analyst|Specialist|Coordinator|Director|Lead|Senior|Junior)?)/i,\n    /(?:looking for|seeking|hiring)\\s+([A-Z][a-zA-Z\\s]+(?:Engineer|Developer|Manager|Analyst|Specialist|Coordinator|Director|Lead|Senior|Junior)?)/i,\n  ];\n\n  for (const pattern of jobTitlePatterns) {\n    const match = text.match(pattern);\n    if (match && match[1].length > 3 && match[1].length < 50) {\n      return match[1].trim();\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Extract keywords from text using simple tokenization and frequency analysis\n */\nfunction extractKeywords(text: string): string[] {\n  // Common stop words to filter out\n  const stopWords = new Set([\n    'the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by',\n    'a', 'an', 'as', 'is', 'was', 'are', 'were', 'be', 'been', 'being', 'have',\n    'has', 'had', 'do', 'does', 'did', 'will', 'would', 'could', 'should',\n    'this', 'that', 'these', 'those', 'i', 'you', 'he', 'she', 'it', 'we', 'they',\n    'me', 'him', 'her', 'us', 'them', 'my', 'your', 'his', 'her', 'its', 'our', 'their',\n    'can', 'may', 'must', 'shall', 'might', 'could', 'would', 'should', 'will',\n    'not', 'no', 'yes', 'all', 'any', 'some', 'many', 'much', 'few', 'little',\n    'more', 'most', 'less', 'least', 'other', 'another', 'each', 'every', 'both',\n    'either', 'neither', 'one', 'two', 'first', 'second', 'last', 'next', 'previous',\n    'new', 'old', 'good', 'bad', 'great', 'small', 'large', 'big', 'long', 'short',\n    'high', 'low', 'early', 'late', 'fast', 'slow', 'easy', 'hard', 'simple', 'complex',\n    'important', 'necessary', 'possible', 'available', 'required', 'preferred',\n    'experience', 'skills', 'ability', 'knowledge', 'understanding', 'familiarity',\n    'responsibilities', 'duties', 'tasks', 'projects', 'team', 'work', 'job', 'position',\n    'role', 'company', 'organization', 'department', 'office', 'location', 'remote',\n    'full', 'time', 'part', 'contract', 'permanent', 'temporary', 'salary', 'benefits',\n    'opportunity', 'career', 'growth', 'development', 'learning', 'training',\n    'bachelor', 'master', 'degree', 'diploma', 'certification', 'license',\n    'years', 'year', 'months', 'month', 'weeks', 'week', 'days', 'day',\n    'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday',\n    'january', 'february', 'march', 'april', 'may', 'june', 'july', 'august',\n    'september', 'october', 'november', 'december'\n  ]);\n\n  // Tokenize and clean text\n  const words = text\n    .toLowerCase()\n    .replace(/[^\\w\\s]/g, ' ')\n    .split(/\\s+/)\n    .filter(word => \n      word.length >= 3 && \n      word.length <= 20 && \n      !stopWords.has(word) &&\n      !/^\\d+$/.test(word) // Filter out pure numbers\n    );\n\n  // Count word frequency\n  const wordCount = new Map<string, number>();\n  words.forEach(word => {\n    wordCount.set(word, (wordCount.get(word) || 0) + 1);\n  });\n\n  // Sort by frequency and return top 25 unique keywords\n  return Array.from(wordCount.entries())\n    .sort((a, b) => b[1] - a[1])\n    .slice(0, 25)\n    .map(([word]) => word);\n}\n\n/**\n * Normalize job description from URL or text\n */\nexport async function normalizeJD(input: { url?: string; text?: string }): Promise<NormalizedJD> {\n  let jdText = input.text || '';\n  let html = '';\n\n  // If URL provided, fetch and extract text\n  if (input.url && !input.text) {\n    try {\n      const response = await fetch(input.url, {\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (compatible; ResumeCoPilot/1.0)',\n        },\n        // Add timeout\n        signal: AbortSignal.timeout(10000), // 10 second timeout\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch job description from URL: ${response.status}`);\n      }\n\n      html = await response.text();\n      jdText = extractTextFromHTML(html);\n\n      // Limit text length to prevent excessive processing\n      if (jdText.length > 20000) {\n        jdText = jdText.substring(0, 20000) + '... [truncated]';\n      }\n    } catch (fetchError) {\n      throw new Error(`Failed to fetch job description from URL: ${fetchError instanceof Error ? fetchError.message : 'Unknown error'}`);\n    }\n  }\n\n  if (!jdText || jdText.trim().length === 0) {\n    throw new Error('No job description text available');\n  }\n\n  // Extract company and role using heuristics\n  const company = extractCompany(html, jdText);\n  const role = extractRole(html, jdText);\n\n  // Extract keywords\n  const keywords = extractKeywords(jdText);\n\n  return {\n    company,\n    role,\n    jdText: jdText.trim(),\n    keywords,\n  };\n}\n"],"names":[],"mappings":"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"}