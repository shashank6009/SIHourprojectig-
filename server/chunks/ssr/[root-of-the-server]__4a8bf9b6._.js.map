{"version":3,"sources":["turbopack:///[project]/src/components/ui/card.tsx","turbopack:///[project]/src/components/ui/alert.tsx","turbopack:///[project]/src/lib/mlService.ts","turbopack:///[project]/src/app/api-test/page.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border border-gray-200 bg-white text-gov-text shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-gray-600\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };\n","import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","// ML Service for Internship Recommendations\n// Integrates with Railway ML API for AI-powered recommendations\n\nimport apiClient from '@/api/client';\n\n// Types for ML API requests and responses (Updated to match Railway API)\nexport interface StudentProfile {\n  student_id: string;\n  skills: string[];\n  stream: string;\n  cgpa: number;\n  rural_urban: string;\n  college_tier: string;\n  \n  // Optional additional fields for our internal use\n  name?: string;\n  email?: string;\n  phone?: string;\n  university?: string;\n  degree?: string;\n  course?: string;\n  graduation_year?: string;\n  current_status?: string;\n  work_experience?: string;\n  languages?: string[];\n  preferred_location?: string;\n  preferred_duration?: string;\n  preferred_domains?: string[];\n  career_objective?: string;\n  projects?: string;\n  certifications?: string;\n  achievements?: string;\n  extracurriculars?: string;\n}\n\nexport interface InternshipRecommendation {\n  internship_id: string;\n  title: string;\n  organization_name: string;\n  domain: string;\n  location: string;\n  duration: string;\n  stipend: number;\n  success_prob: number;\n  missing_skills?: string[];\n  courses?: Array<{\n    name: string;\n    url: string;\n    platform: string;\n  }>;\n  reasons?: string[];\n  // Application timeline fields\n  application_deadline?: string; // ISO date string\n  application_start_date?: string; // ISO date string\n  interview_dates?: string[]; // Array of ISO date strings\n  result_announcement?: string; // ISO date string\n  internship_start_date?: string; // ISO date string\n  // Computed fields for UI\n  rank?: number;\n  scores?: {\n    success_probability: number;\n  };\n  explain_reasons?: string[];\n  course_suggestions?: CourseSuggestion[];\n}\n\nexport interface CourseSuggestion {\n  skill: string;\n  platform: string;\n  course_name: string;\n  link: string;\n  priority?: 'high' | 'medium' | 'low';\n}\n\nexport interface MLRecommendationsResponse {\n  student_id: string;\n  total_recommendations: number;\n  requested_count: number;\n  recommendations: InternshipRecommendation[];\n  processing_time?: number;\n  model_version?: string;\n}\n\nexport interface MLHealthResponse {\n  service: string;\n  version: string;\n  description: string;\n  status: string;\n  endpoints?: {\n    health: string;\n    recommendations: string;\n    docs: string;\n  };\n}\n\nexport class MLService {\n  // Generate random application deadline around December 2025\n  static generateRandomDeadline(): string {\n    // Generate random date between December 1, 2025 and December 31, 2025\n    const startDate = new Date('2025-12-01');\n    \n    // Random number of days to add (0 to 30)\n    const randomDays = Math.floor(Math.random() * 31);\n    \n    // Create the deadline date\n    const deadline = new Date(startDate);\n    deadline.setDate(startDate.getDate() + randomDays);\n    \n    // Add some random time (9 AM to 5 PM)\n    const randomHour = 9 + Math.floor(Math.random() * 8);\n    const randomMinute = Math.floor(Math.random() * 60);\n    deadline.setHours(randomHour, randomMinute, 0, 0);\n    \n    // Add a small random offset to ensure uniqueness\n    const randomSeconds = Math.floor(Math.random() * 60);\n    deadline.setSeconds(randomSeconds);\n    \n    return deadline.toISOString();\n  }\n\n  // Health check for ML API\n  static async healthCheck(): Promise<MLHealthResponse> {\n    try {\n      const response = await apiClient.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('[MLService] Health check failed:', error);\n      throw new Error('ML API is currently unavailable');\n    }\n  }\n\n  // Get recommendations from ML API\n  static async getRecommendations(\n    studentProfile: StudentProfile,\n    topN: number = 10\n  ): Promise<MLRecommendationsResponse> {\n    // Offline-first: if offline, return cached or empty deterministic response\n    if (typeof window !== 'undefined' && typeof navigator !== 'undefined' && navigator && !navigator.onLine) {\n      const cached = this.getCachedRecommendations(studentProfile.student_id);\n      if (cached) {\n        return cached;\n      }\n      return {\n        student_id: studentProfile.student_id,\n        total_recommendations: 0,\n        requested_count: 0,\n        recommendations: [],\n        processing_time: 0,\n        model_version: 'offline'\n      };\n    }\n    // Validate input parameters\n    if (!studentProfile || !studentProfile.student_id) {\n      throw new Error('Invalid student profile: missing student ID');\n    }\n    \n    if (topN < 1 || topN > 50) {\n      throw new Error('Invalid topN parameter: must be between 1 and 50');\n    }\n    \n    try {\n      console.log('[MLService] Requesting recommendations for:', studentProfile.student_id);\n      console.log('[MLService] Request timestamp:', new Date().toISOString());\n      \n      // Send only the required fields to the ML API\n      const apiPayload = {\n        student_id: studentProfile.student_id,\n        skills: Array.isArray(studentProfile.skills) ? studentProfile.skills : [],\n        stream: studentProfile.stream || '',\n        cgpa: typeof studentProfile.cgpa === 'number' ? studentProfile.cgpa : 0,\n        rural_urban: studentProfile.rural_urban || '',\n        college_tier: studentProfile.college_tier?.replace(' ', '-') || ''\n      };\n      \n      console.log('[MLService] API Payload:', JSON.stringify(apiPayload, null, 2));\n      \n      // Validate required fields\n      const requiredFields = ['student_id', 'skills', 'stream', 'cgpa', 'rural_urban', 'college_tier'];\n      const missingFields = requiredFields.filter(field => \n        !apiPayload[field as keyof typeof apiPayload] || \n        (Array.isArray(apiPayload[field as keyof typeof apiPayload]) && \n         (apiPayload[field as keyof typeof apiPayload] as unknown[]).length === 0)\n      );\n      \n      if (missingFields.length > 0) {\n        throw new Error(`Missing required fields: ${missingFields.join(', ')}`);\n      }\n      \n      const response = await apiClient.post('/recommendations', apiPayload);\n      \n      // Debug: Log the raw API response\n      console.log('[MLService] Raw API Response:', JSON.stringify(response.data, null, 2));\n      \n      // Debug: Log success probabilities\n      if (response.data.recommendations) {\n        console.log('[MLService] Success Probabilities:', \n          response.data.recommendations.map((rec, index) => ({\n            index: index + 1,\n            title: rec.title,\n            success_prob: rec.success_prob\n          }))\n        );\n        \n      // Debug: Log recommendation data and determinism\n      console.log('[MLService] Raw API Response:', {\n        total_recommendations: response.data.total_recommendations,\n        first_5_recs: response.data.recommendations.slice(0, 5).map((rec, index) => ({\n          index: index + 1,\n          title: rec.title,\n          organization: rec.organization_name,\n          success_prob: rec.success_prob,\n          internship_id: rec.internship_id\n        }))\n      });\n      \n      // Debug: Log course data\n      console.log('[MLService] Course Data:', \n        response.data.recommendations.map((rec, index) => ({\n          index: index + 1,\n          title: rec.title,\n          courses: rec.courses,\n          missing_skills: rec.missing_skills,\n          success_prob: rec.success_prob\n        }))\n      );\n      }\n\n      // Process and clean the response\n      const rawRecommendations = response.data.recommendations || [];\n      \n      // Sort by success probability (highest first) for consistent ranking\n      const sortedRecommendations = rawRecommendations.sort((a, b) => {\n        const probA = a.success_prob || 0;\n        const probB = b.success_prob || 0;\n        return probB - probA; // Descending order (highest first)\n      });\n      \n      // ⚠️ ML MODEL ISSUE: Add deterministic sorting for consistency\n      // Since the ML model returns random recommendations, we need to ensure\n      // consistent ordering by adding secondary sort criteria\n      const deterministicSorted = sortedRecommendations.sort((a, b) => {\n        const probA = a.success_prob || 0;\n        const probB = b.success_prob || 0;\n        \n        // Primary sort: success probability\n        if (probA !== probB) {\n          return probB - probA;\n        }\n        \n        // Secondary sort: internship_id for deterministic ordering\n        return (a.internship_id || '').localeCompare(b.internship_id || '');\n      });\n      \n      // Assign ranks based on sorted order (highest success probability gets rank 1)\n      const recommendations = deterministicSorted.map((rec: Record<string, unknown>, index: number) => {\n        const processedRec = {\n          // Core recommendation fields (exact API field names)\n          internship_id: rec.internship_id || '',\n          title: rec.title || '',\n          organization_name: rec.organization_name || '',\n          domain: rec.domain || '',\n          location: rec.location || '',\n          duration: rec.duration || '',\n          stipend: rec.stipend || 0,\n          \n          // Success metrics (use success_prob as primary)\n          success_prob: rec.success_prob || 0,\n          projected_success_prob: rec.projected_success_prob || rec.success_prob || 0,\n          \n          // Application stats\n          applicants_total: rec.applicants_total || null,\n          positions_available: rec.positions_available || null,\n          selection_ratio: rec.selection_ratio || null,\n          demand_pressure: rec.demand_pressure || null,\n          \n          // Skill development\n          missing_skills: rec.missing_skills || [],\n          course_suggestions: rec.course_suggestions || rec.courses || [],\n          courses: rec.courses || rec.course_suggestions || [], // Keep both for compatibility\n          reasons: rec.reasons || [],\n          \n          // Application timeline - assign random December 2025 deadline\n          application_deadline: (() => {\n            const deadline = this.generateRandomDeadline();\n            console.log(`[MLService] Generated deadline for ${rec.title}:`, deadline);\n            return deadline;\n          })(),\n          \n          // Enhanced fields (if available)\n          success_breakdown: rec.success_breakdown || null,\n          interview_meta: rec.interview_meta || null,\n          live_counts: rec.live_counts || null,\n          alumni_stories: rec.alumni_stories || [],\n          \n          // Frontend-specific fields\n          rank: index + 1, // Rank 1 for highest success probability\n          scores: {\n            success_probability: rec.success_prob || 0,\n          },\n          explain_reasons: rec.reasons || [],\n          \n          // Legacy compatibility fields\n          ...rec\n        };\n        \n        // Debug: Log processed recommendation\n        console.log(`[MLService] Processed Rec ${index + 1}:`, {\n          title: processedRec.title,\n          organization: processedRec.organization_name,\n          success_prob: processedRec.success_prob,\n          missing_skills: processedRec.missing_skills?.length || 0,\n          course_suggestions: processedRec.course_suggestions?.length || 0,\n          courses: processedRec.courses?.length || 0,\n          reasons: processedRec.reasons?.length || 0,\n          course_suggestions_details: processedRec.course_suggestions,\n          courses_details: processedRec.courses,\n          raw_course_data: {\n            from_api_course_suggestions: rec.course_suggestions,\n            from_api_courses: rec.courses\n          }\n        });\n        \n        return processedRec;\n      });\n\n      return {\n        student_id: response.data.student_id,\n        total_recommendations: response.data.total_recommendations || recommendations.length,\n        requested_count: recommendations.length,\n        recommendations,\n        processing_time: 0,\n        model_version: '1.0'\n      };\n    } catch (error: Record<string, unknown>) {\n      console.error('[MLService] Failed to get recommendations:', error);\n      \n      // Log the actual payload that was sent\n      const apiPayload = {\n        student_id: studentProfile.student_id,\n        skills: Array.isArray(studentProfile.skills) ? studentProfile.skills : [],\n        stream: studentProfile.stream || '',\n        cgpa: typeof studentProfile.cgpa === 'number' ? studentProfile.cgpa : 0,\n        rural_urban: studentProfile.rural_urban || '',\n        college_tier: studentProfile.college_tier || ''\n      };\n      console.error('[MLService] Payload that caused error:', JSON.stringify(apiPayload, null, 2));\n      \n      // Provide specific error messages based on the error type\n      // @ts-expect-error code may be attached dynamically\n      if (error?.code === 'OFFLINE') {\n        const cached = this.getCachedRecommendations(studentProfile.student_id);\n        if (cached) return cached;\n        return {\n          student_id: studentProfile.student_id,\n          total_recommendations: 0,\n          requested_count: 0,\n          recommendations: [],\n          processing_time: 0,\n          model_version: 'offline'\n        };\n      } else if (error?.response?.status === 422) {\n        const errorMessage = error?.response?.data?.error || 'Invalid data provided to ML service';\n        throw new Error(`Data validation failed: ${errorMessage}`);\n      } else if (error?.response?.status === 500) {\n        throw new Error('ML service is temporarily unavailable. Please try again later.');\n      } else if (error?.response?.status === 404) {\n        throw new Error('ML service endpoint not found. Please contact support.');\n      } else if (error?.code === 'NETWORK_ERROR' || !error?.response) {\n        throw new Error('Network error: Unable to connect to ML service. Please check your internet connection.');\n      } else if (error instanceof Error) {\n        throw new Error(`ML API Error: ${error.message}`);\n      } else {\n        throw new Error('Failed to get AI recommendations. Please try again.');\n      }\n    }\n  }\n\n\n  // Transform intern form data to ML API format\n  static transformInternFormToProfile(formData: Record<string, unknown>, userId: string): StudentProfile {\n    // Extract skills from various form fields with better fallbacks\n    const skillSources = [\n      formData.technicalSkills || formData.skills || '',\n      formData.softSkills || '',\n      formData.languages || '',\n      formData.certifications || '',\n      // Add some default skills if none provided\n      formData.course || formData.degree || ''\n    ];\n    \n    let allSkills = skillSources\n      .flatMap(source => this.parseSkills(source))\n      .filter(skill => skill.length > 0);\n    \n    // If no skills provided, add some basic defaults based on stream\n    if (allSkills.length === 0) {\n      allSkills = ['Communication', 'Problem Solving', 'Teamwork'];\n    }\n\n    // Determine stream from course/degree with better fallback\n    const courseInfo = formData.course || formData.degree || formData.educationDetails?.course || formData.educationDetails?.degree || '';\n    let stream = this.determineStream(courseInfo);\n    // Default to Computer Science if can't determine\n    if (!stream) stream = 'Computer Science';\n\n    // Convert CGPA to number with validation\n    let cgpaString = formData.cgpa || '';\n    if (!cgpaString && typeof formData.educationDetails === 'string') {\n      cgpaString = this.extractCgpaFromText(formData.educationDetails);\n    }\n    if (!cgpaString && typeof formData.education === 'string') {\n      cgpaString = this.extractCgpaFromText(formData.education);\n    }\n    let cgpaValue = this.parseCgpaToTenScale(cgpaString);\n    // As a last resort, read from wizard storage if present\n    if ((cgpaValue === 0 || isNaN(cgpaValue)) && typeof window !== 'undefined') {\n      try {\n        const raw = window.localStorage.getItem('pmis-internship-wizard');\n        if (raw) {\n          const wiz = JSON.parse(raw);\n          if (wiz?.cgpa) {\n            cgpaValue = this.parseCgpaToTenScale(String(wiz.cgpa));\n          }\n        }\n      } catch {}\n    }\n    // Default to 7.5 if can't determine\n    if (cgpaValue === 0 || isNaN(cgpaValue)) cgpaValue = 7.5;\n\n    // Determine rural/urban based on location preference or university\n    const locationInfo = formData.preferredLocation || formData.university || formData.city || '';\n    let ruralUrban = this.determineRuralUrban(locationInfo);\n    // Default to Urban if can't determine\n    if (!ruralUrban) ruralUrban = 'Urban';\n\n    // Determine college tier (simplified logic)\n    const universityInfo = formData.university || formData.educationDetails?.university || formData.college || '';\n    let collegeTier = this.determineCollegeTier(universityInfo);\n    // Default to Tier-2 if can't determine\n    if (!collegeTier) collegeTier = 'Tier-2';\n\n    const profile = {\n      // Required ML API fields\n      student_id: userId,\n      skills: allSkills.slice(0, 10), // Limit to top 10 skills (may be empty → validation will catch)\n      stream: stream,\n      cgpa: cgpaValue,\n      rural_urban: ruralUrban,\n      college_tier: collegeTier,\n      \n      // Optional fields for our internal use\n      name: formData.name || `${formData.firstName || ''} ${formData.lastName || ''}`.trim(),\n      email: formData.email || '',\n      phone: formData.phone,\n      university: formData.university || formData.educationDetails?.university || '',\n      degree: formData.degree || formData.educationDetails?.degree || '',\n      course: formData.course || formData.educationDetails?.course || '',\n      graduation_year: formData.graduationYear || formData.educationDetails?.graduationYear || '',\n      current_status: formData.currentStatus || 'Student',\n      work_experience: formData.experience || formData.workExperience || '0-1 years',\n      languages: this.parseSkills(formData.languages),\n      preferred_location: formData.preferredLocation || '',\n      preferred_duration: formData.preferredDuration || formData.duration,\n      preferred_domains: this.parseSkills(formData.preferredDomain || formData.domains),\n      career_objective: formData.careerObjective || formData.objective || '',\n      projects: formData.projects,\n      certifications: formData.certifications,\n      achievements: formData.achievements,\n      extracurriculars: formData.extracurriculars || formData.activities\n    };\n\n    // Debug logging - show all form data keys for debugging\n    console.log('[MLService] All Form Data Keys:', Object.keys(formData));\n    console.log('[MLService] Transform Debug:', {\n      originalFormData: {\n        course: formData.course,\n        degree: formData.degree,\n        cgpa: formData.cgpa,\n        university: formData.university,\n        skills: formData.skills,\n        technicalSkills: formData.technicalSkills,\n        softSkills: formData.softSkills,\n        languages: formData.languages,\n        preferredLocation: formData.preferredLocation,\n        name: formData.name,\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        email: formData.email\n      },\n      transformedProfile: {\n        student_id: profile.student_id,\n        skills: profile.skills,\n        stream: profile.stream,\n        cgpa: profile.cgpa,\n        rural_urban: profile.rural_urban,\n        college_tier: profile.college_tier\n      }\n    });\n\n    return profile;\n  }\n\n  // Parse comma-separated skills into array\n  private static parseSkills(skillsString?: string): string[] {\n    if (!skillsString) return [];\n    return String(skillsString)\n      .split(/[\\n,;•·\\u2022\\-]+/)\n      .map(skill => skill.trim())\n      .filter(skill => skill.length > 0);\n  }\n\n  // Parse CGPA strings like \"8.5/10\", \"85%\", \"8.5\" to a 0-10 scale number\n  private static parseCgpaToTenScale(raw: string): number {\n    if (!raw) return 0;\n    const value = String(raw).trim();\n    // Percentage like 85%\n    const percMatch = value.match(/^(\\d+(?:\\.\\d+)?)\\s*%$/);\n    if (percMatch) {\n      const n = parseFloat(percMatch[1]);\n      if (isNaN(n)) return 0;\n      return Math.min(10, Math.max(0, n / 10));\n    }\n    // Slash formats like 8.5/10 or 3.8/4\n    const slashMatch = value.match(/^(\\d+(?:\\.\\d+)?)\\s*\\/\\s*(\\d+(?:\\.\\d+)?)$/);\n    if (slashMatch) {\n      const num = parseFloat(slashMatch[1]);\n      const denom = parseFloat(slashMatch[2]);\n      if (isNaN(num) || isNaN(denom) || denom === 0) return 0;\n      const tenScale = (num / denom) * 10;\n      return Math.min(10, Math.max(0, tenScale));\n    }\n    // Plain number (assume already on 10 scale)\n    const n = parseFloat(value);\n    if (isNaN(n)) return 0;\n    return Math.min(10, Math.max(0, n));\n  }\n\n  // Extract cgpa-like value from arbitrary education text\n  private static extractCgpaFromText(text: string): string {\n    if (!text) return '';\n    const t = String(text);\n    const match = t.match(/(?:cgpa|gpa|percentage|marks)[^\\d]*(\\d+(?:\\.\\d+)?)(?:\\s*\\/\\s*(\\d+))?|((\\d+(?:\\.\\d+)?)\\s*%)/i);\n    if (match) {\n      if (match[3]) return match[3]; // percentage like 85%\n      if (match[1] && match[2]) return `${match[1]}/${match[2]}`; // 8.5/10\n      if (match[1]) return match[1]; // plain number\n    }\n    return '';\n  }\n\n  // Convert string numbers to actual numbers\n  private static convertToNumber(value: Record<string, unknown>): number {\n    if (typeof value === 'number') return value;\n    if (typeof value === 'string') {\n      const parsed = parseFloat(value);\n      return isNaN(parsed) ? 0 : parsed;\n    }\n    return 0;\n  }\n\n  // Determine stream from course/degree\n  private static determineStream(courseOrDegree: string): string {\n    if (!courseOrDegree) return '';\n    const course = courseOrDegree.toLowerCase();\n    \n    if (course.includes('computer') || course.includes('software') || course.includes('it') || course.includes('information technology')) {\n      return 'Computer Science';\n    } else if (course.includes('mechanical') || course.includes('mech')) {\n      return 'Mechanical Engineering';\n    } else if (course.includes('electrical') || course.includes('electronics') || course.includes('ece') || course.includes('eee')) {\n      return 'Electrical Engineering';\n    } else if (course.includes('civil')) {\n      return 'Civil Engineering';\n    } else if (course.includes('chemical')) {\n      return 'Chemical Engineering';\n    } else if (course.includes('biotechnology') || course.includes('biotech')) {\n      return 'Biotechnology';\n    } else if (course.includes('management') || course.includes('mba') || course.includes('business')) {\n      return 'Management';\n    } else if (course.includes('commerce') || course.includes('bcom') || course.includes('finance')) {\n      return 'Commerce';\n    } else if (course.includes('arts') || course.includes('ba') || course.includes('literature')) {\n      return 'Arts';\n    } else if (course.includes('science') || course.includes('bsc') || course.includes('physics') || course.includes('chemistry') || course.includes('mathematics')) {\n      return 'Science';\n    } else {\n      return '';\n    }\n  }\n\n  // Determine rural/urban classification\n  private static determineRuralUrban(location: string): string {\n    if (!location) return '';\n    const loc = location.toLowerCase();\n    \n    // Major urban centers\n    const urbanKeywords = [\n      'mumbai', 'delhi', 'bangalore', 'hyderabad', 'pune', 'chennai', 'kolkata', \n      'ahmedabad', 'surat', 'jaipur', 'lucknow', 'kanpur', 'nagpur', 'indore',\n      'bhopal', 'visakhapatnam', 'patna', 'vadodara', 'ghaziabad', 'ludhiana',\n      'agra', 'nashik', 'faridabad', 'meerut', 'rajkot', 'kalyan', 'vasai',\n      'varanasi', 'srinagar', 'aurangabad', 'dhanbad', 'amritsar', 'navi mumbai',\n      'allahabad', 'ranchi', 'howrah', 'coimbatore', 'jabalpur', 'gwalior',\n      'vijayawada', 'jodhpur', 'madurai', 'raipur', 'kota', 'guwahati',\n      'chandigarh', 'solapur', 'hubli', 'tiruchirappalli', 'bareilly', 'mysore',\n      'tiruppur', 'gurgaon', 'aligarh', 'jalandhar', 'bhubaneswar', 'salem',\n      'mira', 'bhiwandi', 'saharanpur', 'gorakhpur', 'bikaner', 'amravati',\n      'noida', 'jamshedpur', 'bhilai', 'cuttack', 'firozabad', 'kochi',\n      'nellore', 'bhavnagar', 'dehradun', 'durgapur', 'asansol', 'rourkela',\n      'nanded', 'kolhapur', 'ajmer', 'akola', 'gulbarga', 'jamnagar',\n      'ujjain', 'loni', 'siliguri', 'jhansi', 'ulhasnagar', 'nellore',\n      'jammu', 'sangli miraj kupwad', 'mangalore', 'erode', 'belgaum',\n      'ambattur', 'tirunelveli', 'malegaon', 'gaya', 'jalgaon', 'udaipur',\n      'maheshtala', 'davanagere', 'kozhikode', 'kurnool', 'rajpur sonarpur',\n      'rajahmundry', 'bokaro', 'south dumdum', 'bellary', 'patiala', 'gopalpur',\n      'agartala', 'bhagalpur', 'muzaffarnagar', 'bhatpara', 'panihati',\n      'latur', 'dhule', 'rohtak', 'korba', 'bhilwara', 'berhampur',\n      'muzaffarpur', 'ahmednagar', 'mathura', 'kollam', 'avadi', 'kadapa',\n      'kamarhati', 'sambalpur', 'bilaspur', 'shahjahanpur', 'satara',\n      'bijapur', 'rampur', 'shivamogga', 'chandrapur', 'junagadh',\n      'thrissur', 'alwar', 'bardhaman', 'kulti', 'kakinada', 'nizamabad',\n      'parbhani', 'tumkur', 'khammam', 'ozhukarai', 'bihar sharif',\n      'panipat', 'darbhanga', 'bally', 'aizawl', 'dewas', 'ichalkaranji'\n    ];\n    \n    const isUrban = urbanKeywords.some(keyword => loc.includes(keyword)) || \n                   loc.includes('city') || \n                   loc.includes('metro') || \n                   loc.includes('urban');\n    \n    return isUrban ? 'Urban' : 'Rural';\n  }\n\n  // Determine college tier (simplified classification)\n  private static determineCollegeTier(university: string): string {\n    if (!university) return '';\n    const uni = university.toLowerCase();\n    \n    // Tier 1 institutions\n    const tier1Keywords = [\n      'iit', 'iiit', 'iim', 'iisc', 'nit', 'bits', 'vit', 'manipal', 'srm',\n      'amity', 'lovely professional', 'thapar', 'delhi technological',\n      'indian institute', 'national institute', 'birla institute',\n      'international institute', 'anna university', 'jadavpur university',\n      'university of delhi', 'jawaharlal nehru university', 'banaras hindu university',\n      'aligarh muslim university', 'jamia millia islamia', 'indian statistical institute'\n    ];\n    \n    // Tier 2 institutions\n    const tier2Keywords = [\n      'state university', 'central university', 'deemed university',\n      'engineering college', 'technology institute', 'technical university',\n      'government college', 'autonomous college'\n    ];\n    \n    if (tier1Keywords.some(keyword => uni.includes(keyword))) {\n      return 'Tier-1';\n    } else if (tier2Keywords.some(keyword => uni.includes(keyword))) {\n      return 'Tier-2';\n    } else {\n      return 'Tier-3'; // Default to Tier 3\n    }\n  }\n\n  // Store recommendations for offline access\n  static async storeRecommendations(\n    studentId: string, \n    recommendations: MLRecommendationsResponse\n  ): Promise<void> {\n    try {\n      const storageKey = `ml_recommendations_${studentId}`;\n      const dataToStore = {\n        ...recommendations,\n        timestamp: Date.now(),\n        cached: true\n      };\n      \n      if (typeof window !== 'undefined') {\n        localStorage.setItem(storageKey, JSON.stringify(dataToStore));\n        console.log('[MLService] Recommendations cached for offline access');\n      }\n    } catch (error) {\n      console.error('[MLService] Failed to cache recommendations:', error);\n    }\n  }\n\n  // Get cached recommendations\n  static getCachedRecommendations(studentId: string): MLRecommendationsResponse | null {\n    try {\n      if (typeof window === 'undefined') return null;\n      \n      const storageKey = `ml_recommendations_${studentId}`;\n      const cached = localStorage.getItem(storageKey);\n      \n      if (cached) {\n        const data = JSON.parse(cached);\n        // Return cached data if less than 1 hour old\n        if (Date.now() - data.timestamp < 60 * 60 * 1000) {\n          return data;\n        }\n      }\n    } catch (error) {\n      console.error('[MLService] Failed to get cached recommendations:', error);\n    }\n    \n    return null;\n  }\n\n  // Clear cached recommendations\n  static clearCachedRecommendations(studentId: string): void {\n    try {\n      if (typeof window !== 'undefined') {\n        const storageKey = `ml_recommendations_${studentId}`;\n        localStorage.removeItem(storageKey);\n      }\n    } catch (error) {\n      console.error('[MLService] Failed to clear cached recommendations:', error);\n    }\n  }\n\n  // Get success probability for specific internship\n  static async getSuccessProbability(\n    studentProfile: StudentProfile,\n    internshipId: string\n  ): Promise<number> {\n    try {\n      const response = await apiClient.post('/success-probability', {\n        student_profile: studentProfile,\n        internship_id: internshipId\n      });\n      \n      return this.convertToNumber(response.data.success_probability);\n    } catch (error) {\n      console.error('[MLService] Failed to get success probability:', error);\n      return 0;\n    }\n  }\n}\n\n\n","\"use client\";\n\nimport { useState } from \"react\";\n// Remove Button to prevent hydration mismatch in test page\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { MLService } from \"@/lib/mlService\";\nimport { CheckCircle, AlertCircle, RefreshCw } from \"lucide-react\";\n\nexport default function MLApiTestPage() {\n  const [healthStatus, setHealthStatus] = useState<Record<string, unknown> | null>(null);\n  const [testRecommendations, setTestRecommendations] = useState<Record<string, unknown> | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const testHealthCheck = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const health = await MLService.healthCheck();\n      setHealthStatus(health as unknown as Record<string, unknown>);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Health check failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const testRecommendationsAPI = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const sampleProfile = {\n        student_id: \"test_user_123\",\n        skills: [\"Python\", \"JavaScript\", \"React\", \"Node.js\", \"Machine Learning\", \"Data Analysis\"],\n        stream: \"Computer Science\",\n        cgpa: 8.5,\n        rural_urban: \"Urban\",\n        college_tier: \"Tier-2\",\n        // Optional fields for internal use\n        name: \"Test Student\",\n        email: \"test@example.com\",\n        university: \"Test University\",\n        degree: \"Computer Science\",\n        course: \"B.Tech\",\n        graduation_year: \"2025\",\n        current_status: \"Student\",\n        work_experience: \"0-1 years\",\n        languages: [\"English\", \"Hindi\"],\n        preferred_location: \"Delhi\",\n        preferred_duration: \"3 months\",\n        preferred_domains: [\"Software Development\", \"Data Science\"],\n        career_objective: \"To work in a challenging environment that allows me to grow professionally\"\n      };\n\n      const recommendations = await MLService.getRecommendations(sampleProfile, 5);\n      setTestRecommendations(recommendations as unknown as Record<string, unknown>);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Recommendations test failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4\">\n        <h1 className=\"text-3xl font-bold text-gov-navy mb-8\">ML API Integration Test</h1>\n        \n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-6\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Health Check */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-5 h-5\" />\n                Health Check\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Button \n                onClick={testHealthCheck}\n                disabled={isLoading}\n                className=\"w-full mb-4 bg-gov-saffron hover:bg-gov-saffron/90\"\n              >\n                {isLoading ? (\n                  <>\n                    <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Testing...\n                  </>\n                ) : (\n                  \"Test Health Check\"\n                )}\n              </Button>\n              \n              {healthStatus && (\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <h3 className=\"font-semibold text-green-800 mb-2\">API Status</h3>\n                  <pre className=\"text-sm text-green-700 whitespace-pre-wrap\">\n                    {JSON.stringify(healthStatus, null, 2)}\n                  </pre>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Recommendations Test */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <RefreshCw className=\"w-5 h-5\" />\n                Recommendations Test\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Button \n                onClick={testRecommendationsAPI}\n                disabled={isLoading}\n                className=\"w-full mb-4 bg-blue-600 hover:bg-blue-700\"\n              >\n                {isLoading ? (\n                  <>\n                    <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Testing...\n                  </>\n                ) : (\n                  \"Test Recommendations\"\n                )}\n              </Button>\n              \n              {testRecommendations && (\n                <div className=\"bg-blue-50 p-4 rounded-lg max-h-96 overflow-y-auto\">\n                  <h3 className=\"font-semibold text-blue-800 mb-2\">\n                    Recommendations ({(testRecommendations.total_recommendations as number) || 0})\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {(testRecommendations.recommendations as Record<string, unknown>[])?.slice(0, 3).map((rec: Record<string, unknown>, idx: number) => (\n                      <div key={idx} className=\"bg-white p-3 rounded border\">\n                        <div className=\"font-medium\">{rec.title as string}</div>\n                        <div className=\"text-sm text-gray-600\">{rec.organization_name as string}</div>\n                        <div className=\"text-sm text-blue-600\">\n                          Success: {Math.round(((rec.scores as Record<string, unknown>)?.success_probability as number) * 100)}%\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* API Details */}\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle>API Configuration</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"bg-gray-100 p-4 rounded-lg\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <strong>Base URL:</strong> https://web-production-c72b1.up.railway.app\n                </div>\n                <div>\n                  <strong>Health Endpoint:</strong> /health\n                </div>\n                <div>\n                  <strong>Recommendations Endpoint:</strong> /recommendations\n                </div>\n                <div>\n                  <strong>Timeout:</strong> 10 seconds\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}